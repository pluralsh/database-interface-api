// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: spec/database.proto

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityClient is the client API for Identity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityClient interface {
	// This call is meant to retrieve the unique provisioner Identity.
	// This identity will have to be set in DatabaseClaim.DriverName field in order to invoke this specific provisioner.
	DriverGetInfo(ctx context.Context, in *DriverGetInfoRequest, opts ...grpc.CallOption) (*DriverGetInfoResponse, error)
}

type identityClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityClient(cc grpc.ClientConnInterface) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) DriverGetInfo(ctx context.Context, in *DriverGetInfoRequest, opts ...grpc.CallOption) (*DriverGetInfoResponse, error) {
	out := new(DriverGetInfoResponse)
	err := c.cc.Invoke(ctx, "/database.v1alpha1.Identity/DriverGetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServer is the server API for Identity service.
// All implementations should embed UnimplementedIdentityServer
// for forward compatibility
type IdentityServer interface {
	// This call is meant to retrieve the unique provisioner Identity.
	// This identity will have to be set in DatabaseClaim.DriverName field in order to invoke this specific provisioner.
	DriverGetInfo(context.Context, *DriverGetInfoRequest) (*DriverGetInfoResponse, error)
}

// UnimplementedIdentityServer should be embedded to have forward compatible implementations.
type UnimplementedIdentityServer struct {
}

func (UnimplementedIdentityServer) DriverGetInfo(context.Context, *DriverGetInfoRequest) (*DriverGetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverGetInfo not implemented")
}

// UnsafeIdentityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServer will
// result in compilation errors.
type UnsafeIdentityServer interface {
	mustEmbedUnimplementedIdentityServer()
}

func RegisterIdentityServer(s grpc.ServiceRegistrar, srv IdentityServer) {
	s.RegisterService(&Identity_ServiceDesc, srv)
}

func _Identity_DriverGetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverGetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).DriverGetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.v1alpha1.Identity/DriverGetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).DriverGetInfo(ctx, req.(*DriverGetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Identity_ServiceDesc is the grpc.ServiceDesc for Identity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Identity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database.v1alpha1.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DriverGetInfo",
			Handler:    _Identity_DriverGetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec/database.proto",
}

// ProvisionerClient is the client API for Provisioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionerClient interface {
	// This call is made to create the database in the backend.
	// This call is idempotent
	//    1. If a database that matches both name and parameters already exists, then OK (success) must be returned.
	//    2. If a database by same name, but different parameters is provided, then the appropriate error code ALREADY_EXISTS must be returned.
	DriverCreateDatabase(ctx context.Context, in *DriverCreateDatabaseRequest, opts ...grpc.CallOption) (*DriverCreateDatabaseResponse, error)
	// This call is made to delete the database in the backend.
	// If the database has already been deleted, then no error should be returned.
	DriverDeleteDatabase(ctx context.Context, in *DriverDeleteDatabaseRequest, opts ...grpc.CallOption) (*DriverDeleteDatabaseResponse, error)
	// This call grants access to an account. The account_name in the request shall be used as a unique identifier to create credentials.
	// The account_id returned in the response will be used as the unique identifier for deleting this access when calling DriverRevokeDatabaseAccess.
	DriverGrantDatabaseAccess(ctx context.Context, in *DriverGrantDatabaseAccessRequest, opts ...grpc.CallOption) (*DriverGrantDatabaseAccessResponse, error)
	// This call revokes all access to a particular database from a principal.
	DriverRevokeDatabaseAccess(ctx context.Context, in *DriverRevokeDatabaseAccessRequest, opts ...grpc.CallOption) (*DriverRevokeDatabaseAccessResponse, error)
}

type provisionerClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionerClient(cc grpc.ClientConnInterface) ProvisionerClient {
	return &provisionerClient{cc}
}

func (c *provisionerClient) DriverCreateDatabase(ctx context.Context, in *DriverCreateDatabaseRequest, opts ...grpc.CallOption) (*DriverCreateDatabaseResponse, error) {
	out := new(DriverCreateDatabaseResponse)
	err := c.cc.Invoke(ctx, "/database.v1alpha1.Provisioner/DriverCreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) DriverDeleteDatabase(ctx context.Context, in *DriverDeleteDatabaseRequest, opts ...grpc.CallOption) (*DriverDeleteDatabaseResponse, error) {
	out := new(DriverDeleteDatabaseResponse)
	err := c.cc.Invoke(ctx, "/database.v1alpha1.Provisioner/DriverDeleteDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) DriverGrantDatabaseAccess(ctx context.Context, in *DriverGrantDatabaseAccessRequest, opts ...grpc.CallOption) (*DriverGrantDatabaseAccessResponse, error) {
	out := new(DriverGrantDatabaseAccessResponse)
	err := c.cc.Invoke(ctx, "/database.v1alpha1.Provisioner/DriverGrantDatabaseAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) DriverRevokeDatabaseAccess(ctx context.Context, in *DriverRevokeDatabaseAccessRequest, opts ...grpc.CallOption) (*DriverRevokeDatabaseAccessResponse, error) {
	out := new(DriverRevokeDatabaseAccessResponse)
	err := c.cc.Invoke(ctx, "/database.v1alpha1.Provisioner/DriverRevokeDatabaseAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionerServer is the server API for Provisioner service.
// All implementations should embed UnimplementedProvisionerServer
// for forward compatibility
type ProvisionerServer interface {
	// This call is made to create the database in the backend.
	// This call is idempotent
	//    1. If a database that matches both name and parameters already exists, then OK (success) must be returned.
	//    2. If a database by same name, but different parameters is provided, then the appropriate error code ALREADY_EXISTS must be returned.
	DriverCreateDatabase(context.Context, *DriverCreateDatabaseRequest) (*DriverCreateDatabaseResponse, error)
	// This call is made to delete the database in the backend.
	// If the database has already been deleted, then no error should be returned.
	DriverDeleteDatabase(context.Context, *DriverDeleteDatabaseRequest) (*DriverDeleteDatabaseResponse, error)
	// This call grants access to an account. The account_name in the request shall be used as a unique identifier to create credentials.
	// The account_id returned in the response will be used as the unique identifier for deleting this access when calling DriverRevokeDatabaseAccess.
	DriverGrantDatabaseAccess(context.Context, *DriverGrantDatabaseAccessRequest) (*DriverGrantDatabaseAccessResponse, error)
	// This call revokes all access to a particular database from a principal.
	DriverRevokeDatabaseAccess(context.Context, *DriverRevokeDatabaseAccessRequest) (*DriverRevokeDatabaseAccessResponse, error)
}

// UnimplementedProvisionerServer should be embedded to have forward compatible implementations.
type UnimplementedProvisionerServer struct {
}

func (UnimplementedProvisionerServer) DriverCreateDatabase(context.Context, *DriverCreateDatabaseRequest) (*DriverCreateDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverCreateDatabase not implemented")
}
func (UnimplementedProvisionerServer) DriverDeleteDatabase(context.Context, *DriverDeleteDatabaseRequest) (*DriverDeleteDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverDeleteDatabase not implemented")
}
func (UnimplementedProvisionerServer) DriverGrantDatabaseAccess(context.Context, *DriverGrantDatabaseAccessRequest) (*DriverGrantDatabaseAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverGrantDatabaseAccess not implemented")
}
func (UnimplementedProvisionerServer) DriverRevokeDatabaseAccess(context.Context, *DriverRevokeDatabaseAccessRequest) (*DriverRevokeDatabaseAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverRevokeDatabaseAccess not implemented")
}

// UnsafeProvisionerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionerServer will
// result in compilation errors.
type UnsafeProvisionerServer interface {
	mustEmbedUnimplementedProvisionerServer()
}

func RegisterProvisionerServer(s grpc.ServiceRegistrar, srv ProvisionerServer) {
	s.RegisterService(&Provisioner_ServiceDesc, srv)
}

func _Provisioner_DriverCreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverCreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).DriverCreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.v1alpha1.Provisioner/DriverCreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).DriverCreateDatabase(ctx, req.(*DriverCreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_DriverDeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverDeleteDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).DriverDeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.v1alpha1.Provisioner/DriverDeleteDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).DriverDeleteDatabase(ctx, req.(*DriverDeleteDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_DriverGrantDatabaseAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverGrantDatabaseAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).DriverGrantDatabaseAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.v1alpha1.Provisioner/DriverGrantDatabaseAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).DriverGrantDatabaseAccess(ctx, req.(*DriverGrantDatabaseAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_DriverRevokeDatabaseAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverRevokeDatabaseAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).DriverRevokeDatabaseAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/database.v1alpha1.Provisioner/DriverRevokeDatabaseAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).DriverRevokeDatabaseAccess(ctx, req.(*DriverRevokeDatabaseAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Provisioner_ServiceDesc is the grpc.ServiceDesc for Provisioner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provisioner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "database.v1alpha1.Provisioner",
	HandlerType: (*ProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DriverCreateDatabase",
			Handler:    _Provisioner_DriverCreateDatabase_Handler,
		},
		{
			MethodName: "DriverDeleteDatabase",
			Handler:    _Provisioner_DriverDeleteDatabase_Handler,
		},
		{
			MethodName: "DriverGrantDatabaseAccess",
			Handler:    _Provisioner_DriverGrantDatabaseAccess_Handler,
		},
		{
			MethodName: "DriverRevokeDatabaseAccess",
			Handler:    _Provisioner_DriverRevokeDatabaseAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec/database.proto",
}
